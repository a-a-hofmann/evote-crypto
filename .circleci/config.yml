# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  cargo-version:
    description: "Prints out cargo --version"
    steps:
      - run: cargo --version
      - run: |
          rustup update nightly
          rustup target add wasm32-unknown-unknown --toolchain nightly
          cargo +nightly build --verbose --release --target wasm32-unknown-unknown

  rustfmt:
    description: "Check formatting"
    steps:
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check

  clippy:
    description: "Lint"
    steps:
      - run: rustup component add clippy
      - run: cargo clippy -- -D warnings

  build:
    description: "Build"
    steps:
      - run: rustup update nightly
      - run: rustup target add wasm32-unknown-unknown --toolchain nightly
      - run: cargo +nightly build --verbose --release --target wasm32-unknown-unknown

  store_cache:
    description: "Save cache"
    steps:
      - save_cache:
          key: cargo-{{checksum "Cargo.lock"}}
          paths:
            - "~/.cargo"

jobs:
  build:
    docker:
      - image: cimg/rust:1.46.0
        environment:
          - CARGO_TERM_COLOR: always
    steps:
      - checkout
      - cargo-version
      - restore_cache:
          keys:
            - cargo-{{checksum "Cargo.lock"}}
      - build
      - store_cache
  test:
    docker:
      - image: cimg/rust:1.46.0
        environment:
          - CARGO_TERM_COLOR: always
    steps:
      - checkout
      - run: cargo install cargo2junit
      - run: |
          mkdir -p ~/test-results/
          cargo test --verbose --all-features -- -Z unstable-options --format json | tee ~/test-results/results.json
          cat ~/test-results/results.json | cargo2junit > ~/test-results/results.xml
      - store_test_results:
          path: ~/test-results

  format-and-lint:
    docker:
      - image: cimg/rust:1.46.0
        environment:
          - CARGO_TERM_COLOR: always
    steps:
      - checkout
      - rustfmt
      - clippy


# Orchestrate or schedule a set of jobs
workflows:
  version: 2.1
  build:
    jobs:
      - build
      - test:
          requires:
            - build
      - format-and-lint:
          requires:
            - build
      
